% function colorCodeWellSegmentation

% be able to color code selected cells with any measurement we are
% interested in...

% get the measurement (with exclusion of objects, etc.) via
% getRawProbModelData2()
% strRootPath = '\\nas-biol-imsb-1.d.ethz.ch\share-3-$\Data\Users\Prisca\090203_Mz_Tf_EEA1\090203_Mz_Tf_EEA1_CP392-1ad\BATCH';
% strSettingsFile = '\\nas-biol-imsb-1.d.ethz.ch\share-3-$\Data\Users\Prisca\090203_Mz_Tf_EEA1_vesicles\ProbModel_Settings_wellVisualization.txt';

% strRootPath = '\\nas-biol-ibt-1.d.ethz.ch\share-images-1-$\thaminys\iBrain\41exp\41exp-R1\BATCH';
% strSettingsFile = '\\nas-biol-ibt-1.d.ethz.ch\share-images-1-$\thaminys\iBrain\ProbModel_Settings_Scratch_Visualization.txt';

% strRootPath = 'Z:\Data\Users\Eva\iBRAIN\090224_SV40_GGPPGly_Gly_FAKKO\BATCH';
% strRootPath = 'Z:\Data\Users\Eva\iBRAIN\090130_Eva_GlyplusGGPP_FAKKO_SV40\090130_Eva_GlyplusGGPP_FAKKO_SV40_HardLinks\BATCH';
% strRootPath = 'Z:\Data\Users\Eva\090130_Eva_GlyplusGGPP_FAKKO_SV40\090130_Eva_GlyplusGGPP_FAKKO_SV40_HardLinks\BATCH';

% strRootPath = 'Z:\Data\Users\Berend\Prisca\081202_H2B_GPI_movies_F07\081202_H2B_GPI_movies_F07\BATCH\';
% strRootPath = 'Z:\Data\Users\Berend\Prisca\081202_H2B_GPI_movies_F07\081202_H2B_GPI_movies_F07_HardLink\BATCH\';
% strSettingsFile = '\\nas-biol-imsb-1\share-2-$\Data\Users\Berend\Prisca\081202_H2B_GPI_movies_F07\ProbModel_Settings_WellVisualization.txt';


strRootPath = 'Y:\Data\Users\50K_final_reanalysis_segm\Ad5_KY\061210_Ad5_50K_Ky_2_1_CP072-1aa\BATCH\';
strSettingsFile = 'Y:\Data\Users\50K_final_reanalysis\ProbModel_Settings_ColorCodeSegm.txt';
strWellSegmentationPath = 'Y:\Data\Users\50K_final_reanalysis_segm\Ad5_KY\061210_Ad5_50K_Ky_2_1_CP072-1aa\SEGMENTATION_WELL\';


% strRootPath = '\\nas-biol-imsb-1.d.ethz.ch\share-2-$\Data\Users\Eva\080208_EMD_SV40_FAKKO_RESC_addbackI_HardLinks\080208_EMD_SV40_FAKKO_RESC_addbackI_HardLinks\BATCH\';
% strRootPath = '\\nas-biol-imsb-1.d.ethz.ch\share-3-$\Data\Users\Prisca\090309_A431-Chtx-GM130\090309_A431-Chtx-GM130-CP392-1af\BATCH\';
% strRootPath = 'Y:\Data\Users\Prisca\090403_A431_Dextran_GM1\090403_A431_Dextran_GM1-CP392-1ag\BATCH\';

% strRootPath = '\\nas-biol-imsb-1.d.ethz.ch\share-3-$\Data\Users\Prisca\090203_Mz_Tf_EEA1_harlink_03_1ad\090203_Mz_Tf_EEA1_CP392-1ad\BATCH';
% strSettingsFile = '\\nas-biol-imsb-1.d.ethz.ch\share-3-$\Data\Users\Prisca\090203_Mz_Tf_EEA1_harlink_03_1ad\ProbModel_Settings_WellVisualization.txt';

% strSettingsFile = 'Z:\Data\Users\Eva\iBRAIN\090224_SV40_GGPPGly_Gly_FAKKO\BATCH\ProbModel_Settings_Visualization.txt';
% strSettingsFile = '\\nas-biol-imsb-1.d.ethz.ch\share-3-$\Data\Users\Prisca\090309_A431-Chtx-GM130\090309_A431-Chtx-GM130-CP392-1af\ProbModel_Settings_Visualization.txt';



% select object name of the segmentation (can mismatch the measurement
% object)
strObjectName = 'Nuclei';
% strObjectName = 'Cells';

% directory that contains well segmentation images (if missing, error)
% strWellSegmentationPath = strrep(strRootPath,'BATCH','SEGMENTATION_WELL');
if ~fileattrib(strWellSegmentationPath)
   error('%s: required directory ''%s'' is missing. Please run stitchSegmentationPerWell()',mfilename,strWellSegmentationPath)
end 

% load in the well object id mapping. (if missing, error)
strObjIDMeasurementsFile = fullfile(strRootPath, ['Measurements_',strObjectName,'_StitchedWellObjectIds.mat']);
if ~fileattrib(strObjIDMeasurementsFile)
    error('%s: required file ''%s'' is missing. Either change object name, or please run stitchSegmentationPerWell()',mfilename,strObjIDMeasurementsFile)
end

% get the complete singlecell data of interest
[matCompleteData, strFinalFieldName, matCompleteMetaData] = getRawProbModelData2(strRootPath,strSettingsFile);

% select feature of interest, discard others...
%matFeatureIx = find(strcmpi(strFinalFieldName,'SVM_Good'));

matFeatureIx = find(strcmp(strFinalFieldName,'BinPredicted'));

% if two features are used, the strength of the second makes colors either
% gray or the actual color from the first parameter.
% [~,matFeatureIx] = ismember({'Direction','Distance'},strFinalFieldName);

% [~,matFeatureIx] = ismember('Direction',strFinalFieldName);
% matFeatureIx = find(strcmp(strFinalFieldName,'Direction'));
%  matFeatureIx = find(strcmp(strFinalFieldName,'Intensity_OrigGreen_Cells_2'));
% matFeatureIx = find(strcmp(strFinalFieldName,'LCD'));

% matCompleteData = matCompleteData(:,matFeatureIx);
% strFinalFieldName = strFinalFieldName(matFeatureIx);
if isempty(matFeatureIx)
    error('requested feature is not present in data!')
end

fprintf('%s: loading and parsing well object id data for ''%s''\n',mfilename,strObjectName)
% load object id mapping
handles = LoadMeasurements(struct(),strObjIDMeasurementsFile);
% put cell well object ids in cell array
cellWellObjectIDs = handles.Measurements.(strObjectName).StitchedWellObjectIds;

% let's add a column to matCompleteMetaData that contains the stitched
% well object id's.
matMetaDataWellObjectIDs = NaN(size(matCompleteMetaData,1),1);
for iOrigImage = unique(matCompleteMetaData(:,6))';
    
    matCellRowIX = matCompleteMetaData(:,6)==iOrigImage;
    
    matOKCellIX = matCompleteMetaData(matCellRowIX,7);
    
    matMetaDataWellObjectIDs(matCellRowIX) = cellWellObjectIDs{iOrigImage}(matOKCellIX);
end
matMetaDataWellObjectIDs = uint16(matMetaDataWellObjectIDs);



fprintf('%s: finding & parsing well segmentation images\n',mfilename,strObjectName)
% get list of well segmentation images for current object
strucWellSegmentationFileList = CPdir(strWellSegmentationPath);
strucWellSegmentationFileList(cat(1,strucWellSegmentationFileList.isdir)) = [];
cellWellSegmentationFileList = {strucWellSegmentationFileList.name};
clear strucWellSegmentationFileList
% filter image segmentation list for wanted object
matOKSegIX = cellfun(@(x) ~isempty(findstr(x,['_Segmented',strObjectName])), cellWellSegmentationFileList);
cellWellSegmentationFileList(~matOKSegIX) = [];

% get well coordinates from segmentation images
[matImageRow,matImageCol]=cellfun(@filterimagenamedata,cellWellSegmentationFileList);
matImageWellPositionData = [matImageRow',matImageCol'];


% get the image snake, and image positions. We need this for drawing white
% separator lines between original images.
handles = LoadMeasurements(handles,fullfile(strRootPath, 'Measurements_Image_FileNames.mat'));
cellFileNames = cat(1,handles.Measurements.Image.FileNames{:});
cellFileNames = cellFileNames(:,1);
[matPositionNumbers,cellMicroscopeTypes] = cellfun(@check_image_position,cellFileNames(1:120),'UniformOutput',false);
[matImageSnake,matStitchDimensions] = get_image_snake(max(cell2mat(matPositionNumbers)), unique(cellMicroscopeTypes));




% we should rescale the measurement such that it can be an RGB color..
% matFeatureIx has the column index of measurement of choice
matRescaledData = double(matCompleteData(:,matFeatureIx));
if length(unique(matRescaledData(:)))==2
    % discrete data, don't do quantile rescaling.
    intLowerValue = nanmin(matRescaledData);
    intUpperValue = nanmax(matRescaledData);
else
    % non-discrete data, do quantile rescaling.
%     intLowerValue = quantile(matRescaledData,0.0001);
%     intUpperValue = quantile(matRescaledData,0.95);
    intLowerValue = quantile(matRescaledData,0.1);
    intUpperValue = quantile(matRescaledData,0.9);
end
% intUpperValue = quantile(matRescaledData,1);

intCellCount = size(matRescaledData,1);
matRescaledData = (matRescaledData - repmat(intLowerValue,intCellCount,1)) ./ (repmat(intUpperValue,intCellCount,1)-repmat(intLowerValue,intCellCount,1));
matRescaledData(matRescaledData<0)=0;
matRescaledData(matRescaledData>1)=1;
figure;hist(matRescaledData,100)
matRescaledData = uint8(matRescaledData * 254) + 1;

%%% red-green cmap not via black
matColorMap = [0 0 1;0.0158730167895556,0.984126985073090,0;0.0317460335791111,0.968253970146179,0;0.0476190485060215,0.952380955219269,0;0.0634920671582222,0.936507940292358,0;0.0793650820851326,0.920634925365448,0;0.0952380970120430,0.904761910438538,0;0.111111111938953,0.888888895511627,0;0.126984134316444,0.873015880584717,0;0.142857149243355,0.857142865657806,0;0.158730164170265,0.841269850730896,0;0.174603179097176,0.825396835803986,0;0.190476194024086,0.809523820877075,0;0.206349208950996,0.793650805950165,0;0.222222223877907,0.777777791023254,0;0.238095238804817,0.761904776096344,0;0.253968268632889,0.746031761169434,0;0.269841283559799,0.730158746242523,0;0.285714298486710,0.714285731315613,0;0.301587313413620,0.698412716388702,0;0.317460328340530,0.682539701461792,0;0.333333343267441,0.666666686534882,0;0.349206358194351,0.650793671607971,0;0.365079373121262,0.634920656681061,0;0.380952388048172,0.619047641754150,0;0.396825402975082,0.603174626827240,0;0.412698417901993,0.587301611900330,0;0.428571432828903,0.571428596973419,0;0.444444447755814,0.555555582046509,0;0.460317462682724,0.539682567119598,0;0.476190477609634,0.523809552192688,0;0.492063492536545,0.507936537265778,0;0.507936537265778,0.492063492536545,0;0.523809552192688,0.476190477609634,0;0.539682567119598,0.460317462682724,0;0.555555582046509,0.444444447755814,0;0.571428596973419,0.428571432828903,0;0.587301611900330,0.412698417901993,0;0.603174626827240,0.396825402975082,0;0.619047641754150,0.380952388048172,0;0.634920656681061,0.365079373121262,0;0.650793671607971,0.349206358194351,0;0.666666686534882,0.333333343267441,0;0.682539701461792,0.317460328340530,0;0.698412716388702,0.301587313413620,0;0.714285731315613,0.285714298486710,0;0.730158746242523,0.269841283559799,0;0.746031761169434,0.253968268632889,0;0.761904776096344,0.238095238804817,0;0.777777791023254,0.222222223877907,0;0.793650805950165,0.206349208950996,0;0.809523820877075,0.190476194024086,0;0.825396835803986,0.174603179097176,0;0.841269850730896,0.158730164170265,0;0.857142865657806,0.142857149243355,0;0.873015880584717,0.126984134316444,0;0.888888895511627,0.111111111938953,0;0.904761910438538,0.0952380970120430,0;0.920634925365448,0.0793650820851326,0;0.936507940292358,0.0634920671582222,0;0.952380955219269,0.0476190485060215,0;0.968253970146179,0.0317460335791111,0;0.984126985073090,0.0158730167895556,0;1,0,0;];
% matColorMap = [0 1 0;0.0158730167895556,0.984126985073090,0;0.0317460335791111,0.968253970146179,0;0.0476190485060215,0.952380955219269,0;0.0634920671582222,0.936507940292358,0;0.0793650820851326,0.920634925365448,0;0.0952380970120430,0.904761910438538,0;0.111111111938953,0.888888895511627,0;0.126984134316444,0.873015880584717,0;0.142857149243355,0.857142865657806,0;0.158730164170265,0.841269850730896,0;0.174603179097176,0.825396835803986,0;0.190476194024086,0.809523820877075,0;0.206349208950996,0.793650805950165,0;0.222222223877907,0.777777791023254,0;0.238095238804817,0.761904776096344,0;0.253968268632889,0.746031761169434,0;0.269841283559799,0.730158746242523,0;0.285714298486710,0.714285731315613,0;0.301587313413620,0.698412716388702,0;0.317460328340530,0.682539701461792,0;0.333333343267441,0.666666686534882,0;0.349206358194351,0.650793671607971,0;0.365079373121262,0.634920656681061,0;0.380952388048172,0.619047641754150,0;0.396825402975082,0.603174626827240,0;0.412698417901993,0.587301611900330,0;0.428571432828903,0.571428596973419,0;0.444444447755814,0.555555582046509,0;0.460317462682724,0.539682567119598,0;0.476190477609634,0.523809552192688,0;0.492063492536545,0.507936537265778,0;0.507936537265778,0.492063492536545,0;0.523809552192688,0.476190477609634,0;0.539682567119598,0.460317462682724,0;0.555555582046509,0.444444447755814,0;0.571428596973419,0.428571432828903,0;0.587301611900330,0.412698417901993,0;0.603174626827240,0.396825402975082,0;0.619047641754150,0.380952388048172,0;0.634920656681061,0.365079373121262,0;0.650793671607971,0.349206358194351,0;0.666666686534882,0.333333343267441,0;0.682539701461792,0.317460328340530,0;0.698412716388702,0.301587313413620,0;0.714285731315613,0.285714298486710,0;0.730158746242523,0.269841283559799,0;0.746031761169434,0.253968268632889,0;0.761904776096344,0.238095238804817,0;0.777777791023254,0.222222223877907,0;0.793650805950165,0.206349208950996,0;0.809523820877075,0.190476194024086,0;0.825396835803986,0.174603179097176,0;0.841269850730896,0.158730164170265,0;0.857142865657806,0.142857149243355,0;0.873015880584717,0.126984134316444,0;0.888888895511627,0.111111111938953,0;0.904761910438538,0.0952380970120430,0;0.920634925365448,0.0793650820851326,0;0.936507940292358,0.0634920671582222,0;0.952380955219269,0.0476190485060215,0;0.968253970146179,0.0317460335791111,0;0.984126985073090,0.0158730167895556,0;1,0,0;];
% matColorMap = [0,0,0.968253970146179;0.0158730167895556,0,0.952380955219269;0.0317460335791111,0,0.936507940292358;0.0476190485060215,0,0.920634925365448;0.0634920671582222,0,0.904761910438538;0.0793650820851326,0,0.888888895511627;0.0952380970120430,0,0.873015880584717;0.111111111938953,0,0.857142865657806;0.126984134316444,0,0.841269850730896;0.142857149243355,0,0.825396835803986;0.158730164170265,0,0.809523820877075;0.174603179097176,0,0.793650805950165;0.190476194024086,0,0.777777791023254;0.206349208950996,0,0.761904776096344;0.222222223877907,0,0.746031761169434;0.238095238804817,0,0.730158746242523;0.253968268632889,0,0.714285731315613;0.269841283559799,0,0.698412716388702;0.285714298486710,0,0.682539701461792;0.301587313413620,0,0.666666686534882;0.317460328340530,0,0.650793671607971;0.333333343267441,0,0.634920656681061;0.349206358194351,0,0.619047641754150;0.365079373121262,0,0.603174626827240;0.380952388048172,0,0.587301611900330;0.396825402975082,0,0.571428596973419;0.412698417901993,0,0.555555582046509;0.428571432828903,0,0.539682567119598;0.444444447755814,0,0.523809552192688;0.460317462682724,0,0.507936537265778;0.476190477609634,0,0.492063492536545;0.492063492536545,0,0.476190477609634;0.507936537265778,0,0.460317462682724;0.523809552192688,0,0.444444447755814;0.539682567119598,0,0.428571432828903;0.555555582046509,0,0.412698417901993;0.571428596973419,0,0.396825402975082;0.587301611900330,0,0.380952388048172;0.603174626827240,0,0.365079373121262;0.619047641754150,0,0.349206358194351;0.634920656681061,0,0.333333343267441;0.650793671607971,0,0.317460328340530;0.666666686534882,0,0.301587313413620;0.682539701461792,0,0.285714298486710;0.698412716388702,0,0.269841283559799;0.714285731315613,0,0.253968268632889;0.730158746242523,0,0.238095238804817;0.746031761169434,0,0.222222223877907;0.761904776096344,0,0.206349208950996;0.777777791023254,0,0.190476194024086;0.793650805950165,0,0.174603179097176;0.809523820877075,0,0.158730164170265;0.825396835803986,0,0.142857149243355;0.841269850730896,0,0.126984134316444;0.857142865657806,0,0.111111111938953;0.873015880584717,0,0.0952380970120430;0.888888895511627,0,0.0793650820851326;0.904761910438538,0,0.0634920671582222;0.920634925365448,0,0.0476190485060215;0.936507940292358,0,0.0317460335791111;0.952380955219269,0,0.0158730167895556;0.968253970146179,0,0;0.984126985073090,0.0158730167895556,0;1,0,0;]
matColorMap = imresize(matColorMap,[255,3],'lanczos2');
matColorMap(matColorMap>1)=1;
matColorMap(matColorMap<0)=0;

% foo = get(gcf,'colormap')


% %%%
% % circular colormap blue - green - yellow - red - blue
% % matColorMap = [0.0784313753247261,0.168627455830574,0.549019634723663;0.0732026174664497,0.224052295088768,0.512418329715729;0.0679738596081734,0.279477119445801,0.475817024707794;0.0627451017498970,0.334901958703995,0.439215719699860;0.0575163401663303,0.390326797962189,0.402614384889603;0.0522875823080540,0.445751637220383,0.366013079881668;0.0470588244497776,0.501176476478577,0.329411774873734;0.0418300665915012,0.556601285934448,0.292810469865799;0.0366013087332249,0.612026154994965,0.256209164857864;0.0313725508749485,0.667450964450836,0.219607859849930;0.0261437911540270,0.722875833511353,0.183006539940834;0.0209150332957506,0.778300642967224,0.146405234932899;0.0156862754374743,0.833725512027741,0.109803929924965;0.0104575166478753,0.889150321483612,0.0732026174664497;0.00522875832393765,0.944575190544128,0.0366013087332249;0,1,0;0.0625000000000000,1,0;0.125000000000000,1,0;0.187500000000000,1,0;0.250000000000000,1,0;0.312500000000000,1,0;0.375000000000000,1,0;0.437500000000000,1,0;0.500000000000000,1,0;0.562500000000000,1,0;0.625000000000000,1,0;0.687500000000000,1,0;0.750000000000000,1,0;0.812500000000000,1,0;0.875000000000000,1,0;0.937500000000000,1,0;1,1,0;1,0.937500000000000,0;1,0.875000000000000,0;1,0.812500000000000,0;1,0.750000000000000,0;1,0.687500000000000,0;1,0.625000000000000,0;1,0.562500000000000,0;1,0.500000000000000,0;1,0.437500000000000,0;1,0.375000000000000,0;1,0.312500000000000,0;1,0.250000000000000,0;1,0.187500000000000,0;1,0.125000000000000,0;1,0.0625000000000000,0;1,0,0;0.942401945590973,0.0105392159894109,0.0343137271702290;0.884803950786591,0.0210784319788218,0.0686274543404579;0.827205896377564,0.0316176488995552,0.102941185235977;0.769607841968536,0.0421568639576435,0.137254908680916;0.712009787559509,0.0526960790157318,0.171568632125855;0.654411792755127,0.0632352977991104,0.205882370471954;0.596813738346100,0.0737745091319084,0.240196093916893;0.539215683937073,0.0843137279152870,0.274509817361832;0.481617659330368,0.0948529466986656,0.308823555707932;0.424019604921341,0.105392158031464,0.343137264251709;0.366421580314636,0.115931376814842,0.377451002597809;0.308823525905609,0.126470595598221,0.411764740943909;0.251225501298904,0.137009814381599,0.446078449487686;0.193627446889877,0.147549018263817,0.480392187833786;0.136029407382011,0.158088237047195,0.514705896377564;0.0784313753247261,0.168627455830574,0.549019634723663;];
% % circular colormap green - pink - green
% matColorMap = [0,1,0;0.0322580635547638,0.967741906642914,0.0322580635547638;0.0645161271095276,0.935483872890472,0.0645161271095276;0.0967741906642914,0.903225779533386,0.0967741906642914;0.129032254219055,0.870967745780945,0.129032254219055;0.161290317773819,0.838709652423859,0.161290317773819;0.193548381328583,0.806451618671417,0.193548381328583;0.225806444883347,0.774193525314331,0.225806444883347;0.258064508438110,0.741935491561890,0.258064508438110;0.290322571992874,0.709677398204804,0.290322571992874;0.322580635547638,0.677419364452362,0.322580635547638;0.354838699102402,0.645161271095276,0.354838699102402;0.387096762657166,0.612903237342835,0.387096762657166;0.419354826211929,0.580645143985748,0.419354826211929;0.451612889766693,0.548387110233307,0.451612889766693;0.483870953321457,0.516129016876221,0.483870953321457;0.516129016876221,0.483870953321457,0.516129016876221;0.548387110233307,0.451612889766693,0.548387110233307;0.580645143985748,0.419354826211929,0.580645143985748;0.612903237342835,0.387096762657166,0.612903237342835;0.645161271095276,0.354838699102402,0.645161271095276;0.677419364452362,0.322580635547638,0.677419364452362;0.709677398204804,0.290322571992874,0.709677398204804;0.741935491561890,0.258064508438110,0.741935491561890;0.774193525314331,0.225806444883347,0.774193525314331;0.806451618671417,0.193548381328583,0.806451618671417;0.838709652423859,0.161290317773819,0.838709652423859;0.870967745780945,0.129032254219055,0.870967745780945;0.903225779533386,0.0967741906642914,0.903225779533386;0.935483872890472,0.0645161271095276,0.935483872890472;0.967741906642914,0.0322580635547638,0.967741906642914;1,0,1;0.968750000000000,0.0312500000000000,0.968750000000000;0.937500000000000,0.0625000000000000,0.937500000000000;0.906250000000000,0.0937500000000000,0.906250000000000;0.875000000000000,0.125000000000000,0.875000000000000;0.843750000000000,0.156250000000000,0.843750000000000;0.812500000000000,0.187500000000000,0.812500000000000;0.781250000000000,0.218750000000000,0.781250000000000;0.750000000000000,0.250000000000000,0.750000000000000;0.718750000000000,0.281250000000000,0.718750000000000;0.687500000000000,0.312500000000000,0.687500000000000;0.656250000000000,0.343750000000000,0.656250000000000;0.625000000000000,0.375000000000000,0.625000000000000;0.593750000000000,0.406250000000000,0.593750000000000;0.562500000000000,0.437500000000000,0.562500000000000;0.531250000000000,0.468750000000000,0.531250000000000;0.500000000000000,0.500000000000000,0.500000000000000;0.468750000000000,0.531250000000000,0.468750000000000;0.437500000000000,0.562500000000000,0.437500000000000;0.406250000000000,0.593750000000000,0.406250000000000;0.375000000000000,0.625000000000000,0.375000000000000;0.343750000000000,0.656250000000000,0.343750000000000;0.312500000000000,0.687500000000000,0.312500000000000;0.281250000000000,0.718750000000000,0.281250000000000;0.250000000000000,0.750000000000000,0.250000000000000;0.218750000000000,0.781250000000000,0.218750000000000;0.187500000000000,0.812500000000000,0.187500000000000;0.156250000000000,0.843750000000000,0.156250000000000;0.125000000000000,0.875000000000000,0.125000000000000;0.0937500000000000,0.906250000000000,0.0937500000000000;0.0625000000000000,0.937500000000000,0.0625000000000000;0.0312500000000000,0.968750000000000,0.0312500000000000;0,1,0;];
% matColorMap = imresize(matColorMap,[255,3],'lanczos2');
% matColorMap(matColorMap>1)=1;
% matColorMap(matColorMap<0)=0;

% %%% red-green cmap
% % matColorMap = redgreencmap(255);
% %%% red-blue cmap
% matColorMap = redbluecmap(11);
% matColorMap = imresize(matColorMap,[255,3],'lanczos2');
% matColorMap(matColorMap>1)=1;
% matColorMap(matColorMap<0)=0;
% % create color value for each object

if size(matRescaledData,2)==1
    matColoredData = matColorMap(matRescaledData,:);
elseif size(matRescaledData,2)==2
    
    % if there is a second parameter, the first one determines the color.
    % the second when lower values makes the color go more to gray
    matColoredData = matColorMap(matRescaledData(:,1),:);
    
    % calculate how much it takes to transform each color to gray.
    matDifferenceFromGray = repmat([.5 .5 .5],size(matRescaledData,1),1) - matColoredData;

    % make that transformation to gray stepwise depending on second
    % parameter value.
    matStepFactor = 100 * nanzscore(double(matRescaledData(:,2)));
    matStepFactor(matStepFactor<1) = 1;
    
    matColoredData = matColoredData + (matDifferenceFromGray ./ repmat(matStepFactor,1,3));
    
    matColoredData(matColoredData<0) = 0;
    matColoredData(matColoredData>1) = 1;
    
end


fprintf('%s: looping over well segmentation images\n',mfilename,strObjectName)
% loop over all present well coordinates
for iWellPos = unique(matCompleteMetaData(:,[1,2]),'rows')'
    
    matCellIX = ismember(matCompleteMetaData(:,[1,2]),iWellPos','rows');
    
    matSegImgIX = ismember(matImageWellPositionData,iWellPos','rows');
    
    matSegImg = imread(fullfile(strWellSegmentationPath, cellWellSegmentationFileList{matSegImgIX}));
    
%     if ~(length(unique(matMetaDataWellObjectIDs(matCellIX))) == sum(matCellIX))
%         error('this should not happen :(')
%     end
    
    % make colormap with for each object id value a unique color... (will
    % this work?)
%     matObjectColorMap = zeros(max([matMetaDataWellObjectIDs(matCellIX);unique(matSegImg(matSegImg>0))]),3);
    matObjectColorMap = ones(max([matMetaDataWellObjectIDs(matCellIX);unique(matSegImg(matSegImg>0))]),3);
    
    %%%%%%%%%%%%%%%%%%%%
    %%% CHECK THIS!! %%%
    % sum(matMetaDataWellObjectIDs==0)
    %%% should really not occur!
    % matCellIX(matMetaDataWellObjectIDs(matCellIX)==0)=1;
    
    matObjectColorMap(matMetaDataWellObjectIDs(matCellIX),:) = matColoredData(matCellIX,:);
    
    % color code objects according to measurements
    matRGB = label2rgb(matSegImg, matObjectColorMap, [0,0,0]);
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% TEMP HACK, DRAW DIVIDING LINES BETWEEN FRAMES %%%
    % shirnk figure a bit
%     matRGB = imresize(matRGB,0.5);
    % draw grey (color = 0.5 0.5 0.5) lines at image borders
    [matSize1,matSize2,matSize3]=size(matRGB);
    matStepSize1 = matSize1 / matStitchDimensions(1);% should come from get_image_snake!!
    matStepSize2 = matSize2 / matStitchDimensions(2);% should come from get_image_snake!!
    matYSteps = 0:matStepSize1:matSize1;matYSteps(1)=1;
    matXSteps = 0:matStepSize2:matSize2;matXSteps(1)=1;
    matRGB(matYSteps,:,:) = intmax(class(matRGB))/2;
    matRGB(:,matXSteps,:) = intmax(class(matRGB))/2;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    figure(gcf)
    clf(gcf)
    hold on
    imshow(matRGB)
    colormap(matColorMap);
    colorbar
    hold off
    
%     strFileName = fullfile(strrep(strWellSegmentationPath,'SEGMENTATION_WELL','JPG'),strrep(cellWellSegmentationFileList{matSegImgIX},'.png',['_',strFinalFieldName{matFeatureIx},'.jpg']));
%     imwrite(matRGB,strFileName,'quality',80);
    
    strFileName = fullfile(strrep(strWellSegmentationPath,'SEGMENTATION_WELL','JPG'),strrep(cellWellSegmentationFileList{matSegImgIX},'.png',['_',strFinalFieldName{matFeatureIx},'.bmp']));
    imwrite(matRGB,strFileName);
    fprintf('%s: stored %s\n',mfilename,strFileName)
end


merge_jpgs_per_plate(strrep(strWellSegmentationPath,'SEGMENTATION_WELL','JPG'), strFinalFieldName{matFeatureIx})
