
function create_jpgs_wSegmentation_SVMclean_onlyRoot(strRootPath,strRGBtype)
%%%%%%%%%%%%%%%%%%%%%%%%
% This function add on top of the jpgs the segmentation of the cell and the
% nuclei. It also makes the SVM excluded cells grey.
% 



% strSettingsFile = 'Y:\Data\Users\50K_final_reanalysis\ProbModel_Settings_ColorCodeSegm.txt';

% the Ad5_KY pair of images

% strRootPath = 'Y:\Data\Users\50K_final_reanalysis\Ad5_KY\061117_Ad5_50K_KY_3_1_CP073-1aa\BATCH\';
% strWellSegmentationPath = 'Y:\Data\Users\50K_final_reanalysis_segm\Ad5_KY\061117_Ad5_50K_KY_3_1_CP073-1aa\SEGMENTATION_WELL\';
% strWellSegmentationBatchPath = 'Y:\Data\Users\50K_final_reanalysis_segm\Ad5_KY\061117_Ad5_50K_KY_3_1_CP073-1aa\BATCH\';
% matWells = [6,3]';% well F03

% strRootPath = 'Y:\Data\Users\50K_final_reanalysis\Ad5_KY\061210_Ad5_50K_Ky_2_1_CP072-1aa\BATCH\';
% strWellSegmentationPath = 'Y:\Data\Users\50K_final_reanalysis_segm\Ad5_KY\061210_Ad5_50K_Ky_2_1_CP072-1aa\SEGMENTATION_WELL\';
% strWellSegmentationBatchPath = 'Y:\Data\Users\50K_final_reanalysis_segm\Ad5_KY\061210_Ad5_50K_Ky_2_1_CP072-1aa\BATCH\';
% matWells = [2,10]';% well B10


% the YF_KY pair of images. Nicer, also nicer segmented, than the Ad5_KY
% pair.

% strRootPath = 'Y:\Data\Users\50K_final_reanalysis\YF_KY\070115_YF_50K_KY_P2_1_3_CP072-1ac\BATCH\';
% strWellSegmentationPath = 'Y:\Data\Users\50K_final_reanalysis_segm\YF_KY\070115_YF_50K_KY_P2_1_3_CP072-1ac\SEGMENTATION_WELL\';
% strWellSegmentationBatchPath = 'Y:\Data\Users\50K_final_reanalysis_segm\YF_KY\070115_YF_50K_KY_P2_1_3_CP072-1ac\BATCH\';
% matWells = [6,4]';% well F04

% strRootPath = 'Y:\Data\Users\50K_final_reanalysis\YF_KY\070115_YF_50K_KY_P3_1_1_CP073-1aa\BATCH\';
% strWellSegmentationPath = 'Y:\Data\Users\50K_final_reanalysis_segm\YF_KY\070115_YF_50K_KY_P3_1_1_CP073-1aa\SEGMENTATION_WELL\';
% strWellSegmentationBatchPath = 'Y:\Data\Users\50K_final_reanalysis_segm\YF_KY\070115_YF_50K_KY_P3_1_1_CP073-1aa\BATCH\';
% matWells = [4,10]';% well D10

% strRootPath = 'Y:\Data\Users\Berend\50K_examples\YF_KY\BATCH\';
% strSettingsFile = 'Y:\Data\Users\Berend\50K_examples\ProbModel_Settings_ColorCodeSegm.txt';
if nargin ==0
    strRootPath = 'Z:\Data\Users\Prisca\090203_Mz_Tf_EEA1_harlink_03_1ad\090203_Mz_Tf_EEA1_CP392-1ad\BATCH';
   
    strRGBtype = 'RGB1';
end



strJpgPath=strrep(strRootPath,'BATCH','JPG_HR');
strSettingsFile=strrep(strRootPath,'BATCH','ProbModel_Settings_Minimal.txt');

 strRootPath = npc(strRootPath);
 strJpgPath = npc(strJpgPath);
 strSettingsFile = npc(strSettingsFile);
strRootPath = npc(strRootPath);
strJpgPath = npc(strJpgPath);
strSettingsFile = npc(strSettingsFile);

strWellSegmentationPath = strrep(strRootPath,'BATCH','SEGMENTATION_WELL');
strOutputPath = strrep(strWellSegmentationPath,'SEGMENTATION_WELL','JPG_SEGM');

if ~fileattrib(strOutputPath)
    fprintf('%s: creating output directory ''%s''',mfilename,strOutputPath)
    mkdir(strOutputPath)
end



%%%%%%%%%%%%%%%%%%%%%%%%
% select your settings:

% select object name of the segmentation (can mismatch the measurement
% object)
% strObjectName = 'ExpandedNuclei';
% strObjectName = 'Nuclei';
strObjectName = 'Cells';

% strFieldName = 'LCD';
% strFieldName = 'Edge';
% strFieldName = 'Size';
% strFieldName = 'DvKy2_predicted_infection';
% strFieldName = 'VVKY_predicted_infection';
% strFieldName = 'Ad3KYNEW_predicted_infection';
% strFieldName = 'RVKY2_predicted_infection';
% strFieldName = 'SV40MZ_predicted_infection';
% strFieldName = 'SFVKY_predicted_infection';
% strFieldName = 'Ad5KY_predicted_infection';

% end of settings
%%%%%%%%%%%%%%%%%%%%%%%%





% directory that contains well segmentation images (if missing, error)
strWellSegmentationPath = strrep(strRootPath,'BATCH','SEGMENTATION_WELL');
if ~fileattrib(strWellSegmentationPath)
   error('%s: required directory ''%s'' is missing. Please run stitchSegmentationPerWell()',mfilename,strWellSegmentationPath)
end 

% load in the well object id mapping. (if missing, error)
if ~exist('strWellSegmentationBatchPath')
    strWellSegmentationBatchPath = strRootPath;
end

strObjIDMeasurementsFile = fullfile(strWellSegmentationBatchPath, ['Measurements_',strObjectName,'_StitchedWellObjectIds.mat']);
if ~fileattrib(strObjIDMeasurementsFile)
    error('%s: required file ''%s'' is missing. Either change object name, or please run stitchSegmentationPerWell()',mfilename,strObjIDMeasurementsFile)
end

% get the complete singlecell data of interest
[matCompleteData, strFinalFieldName, matCompleteMetaData] = getRawProbModelData2(strRootPath,strSettingsFile);

% override measurement to be all ones, so that all not-included cells
% become zeros
matFeatureIx = 1;
matCompleteData(:,1) = 1;

% % BS-temp
% warning('bs:Bla','log10 transform!!')
% matCompleteData(:,1) = log10(matCompleteData(:,1));


% select feature of interest, discard others...
%matFeatureIx = find(strcmpi(strFinalFieldName,'SVM_Good'));

% matFeatureIx = find(strcmp(strFinalFieldName,'Edge'));
% matFeatureIx = find(strcmp(strFinalFieldName,strFieldName));


% if two features are used, the strength of the second makes colors either
% gray or the actual color from the first parameter.
% [~,matFeatureIx] = ismember({'Direction','Distance'},strFinalFieldName);

% [~,matFeatureIx] = ismember('Direction',strFinalFieldName);
% matFeatureIx = find(strcmp(strFinalFieldName,'Direction'));
%  matFeatureIx = find(strcmp(strFinalFieldName,'Intensity_OrigGreen_Cells_2'));
% matFeatureIx = find(strcmp(strFinalFieldName,'LCD'));

% matCompleteData = matCompleteData(:,matFeatureIx);
% strFinalFieldName = strFinalFieldName(matFeatureIx);
% if isempty(matFeatureIx)
%     error('requested feature is not present in data!')
% end

fprintf('%s: loading and parsing well object id data for ''%s''\n',mfilename,strObjectName)
% load object id mapping
handles = LoadMeasurements(struct(),strObjIDMeasurementsFile);
% put cell well object ids in cell array
cellWellObjectIDs = handles.Measurements.(strObjectName).StitchedWellObjectIds;

% let's add a column to matCompleteMetaData that contains the stitched
% well object id's. Not the fastest :)
matMetaDataWellObjectIDs = NaN(size(matCompleteMetaData,1),1);
for iOrigImage = unique(matCompleteMetaData(:,6))';
    
    matCellRowIX = matCompleteMetaData(:,6)==iOrigImage;
    
    matOKCellIX = matCompleteMetaData(matCellRowIX,7);
    
    matMetaDataWellObjectIDs(matCellRowIX) = cellWellObjectIDs{iOrigImage}(matOKCellIX);
end
matMetaDataWellObjectIDs = uint16(matMetaDataWellObjectIDs);



fprintf('%s: finding & parsing well segmentation images\n',mfilename,strObjectName)
% get list of well segmentation images for current object
strucWellSegmentationFileList = CPdir(strWellSegmentationPath);
strucWellSegmentationFileList(cat(1,strucWellSegmentationFileList.isdir)) = [];
cellWellSegmentationFileList = {strucWellSegmentationFileList.name};
clear strucWellSegmentationFileList
% filter image segmentation list for wanted object
matOKSegIX = cellfun(@(x) ~isempty(findstr(x,['_Segmented',strObjectName])), cellWellSegmentationFileList);
cellWellSegmentationFileList(~matOKSegIX) = [];


% get well coordinates from segmentation images
[matImageRow,matImageCol]=cellfun(@filterimagenamedata,cellWellSegmentationFileList);
matImageWellPositionData = [matImageRow',matImageCol'];


% get the image snake, and image positions. We need this for drawing white
% separator lines between original images.
handles = LoadMeasurements(handles,fullfile(strRootPath, 'Measurements_Image_FileNames.mat'));
cellFileNames = cat(1,handles.Measurements.Image.FileNames{:});
cellFileNames = cellFileNames(:,1);
[matPositionNumbers,cellMicroscopeTypes] = cellfun(@check_image_position,cellFileNames,'UniformOutput',false);
[matImageSnake,matStitchDimensions] = get_image_snake(max(cell2mat(matPositionNumbers)), unique(cellMicroscopeTypes));


% % we should rescale the measurement such that it can be an RGB color..
% % matFeatureIx has the column index of measurement of choice
matRescaledData = double(matCompleteData(:,matFeatureIx));
% if length(unique(matRescaledData(:)))==2
%     % discrete data, don't do quantile rescaling.
%     intLowerValue = nanmin(matRescaledData);
%     intUpperValue = nanmax(matRescaledData);
% else
%     % non-discrete data, do quantile rescaling.
% %     intLowerValue = quantile(matRescaledData,0.0001);
% %     intUpperValue = quantile(matRescaledData,0.95);
% %     intLowerValue = 0%quantile(matRescaledData,0);
% %     intUpperValue = 0.25%quantile(matRescaledData,0.45);
%     intLowerValue = 0.1%quantile(matRescaledData,0.05);
%     intUpperValue = 0.4%quantile(matRescaledData,0.95);
% end
% % intUpperValue = quantile(matRescaledData,1);
% 
% intCellCount = size(matRescaledData,1);
% matRescaledData = (matRescaledData - repmat(intLowerValue,intCellCount,1)) ./ (repmat(intUpperValue,intCellCount,1)-repmat(intLowerValue,intCellCount,1));
% matRescaledData(matRescaledData<0)=0;
% matRescaledData(matRescaledData>1)=1;
% figure;hist(matRescaledData,100)
% matRescaledData = uint8(matRescaledData * 254) + 1;

%%% red-green cmap not via black
% matColorMap = [0 0 1;0.0158730167895556,0.984126985073090,0;0.0317460335791111,0.968253970146179,0;0.0476190485060215,0.952380955219269,0;0.0634920671582222,0.936507940292358,0;0.0793650820851326,0.920634925365448,0;0.0952380970120430,0.904761910438538,0;0.111111111938953,0.888888895511627,0;0.126984134316444,0.873015880584717,0;0.142857149243355,0.857142865657806,0;0.158730164170265,0.841269850730896,0;0.174603179097176,0.825396835803986,0;0.190476194024086,0.809523820877075,0;0.206349208950996,0.793650805950165,0;0.222222223877907,0.777777791023254,0;0.238095238804817,0.761904776096344,0;0.253968268632889,0.746031761169434,0;0.269841283559799,0.730158746242523,0;0.285714298486710,0.714285731315613,0;0.301587313413620,0.698412716388702,0;0.317460328340530,0.682539701461792,0;0.333333343267441,0.666666686534882,0;0.349206358194351,0.650793671607971,0;0.365079373121262,0.634920656681061,0;0.380952388048172,0.619047641754150,0;0.396825402975082,0.603174626827240,0;0.412698417901993,0.587301611900330,0;0.428571432828903,0.571428596973419,0;0.444444447755814,0.555555582046509,0;0.460317462682724,0.539682567119598,0;0.476190477609634,0.523809552192688,0;0.492063492536545,0.507936537265778,0;0.507936537265778,0.492063492536545,0;0.523809552192688,0.476190477609634,0;0.539682567119598,0.460317462682724,0;0.555555582046509,0.444444447755814,0;0.571428596973419,0.428571432828903,0;0.587301611900330,0.412698417901993,0;0.603174626827240,0.396825402975082,0;0.619047641754150,0.380952388048172,0;0.634920656681061,0.365079373121262,0;0.650793671607971,0.349206358194351,0;0.666666686534882,0.333333343267441,0;0.682539701461792,0.317460328340530,0;0.698412716388702,0.301587313413620,0;0.714285731315613,0.285714298486710,0;0.730158746242523,0.269841283559799,0;0.746031761169434,0.253968268632889,0;0.761904776096344,0.238095238804817,0;0.777777791023254,0.222222223877907,0;0.793650805950165,0.206349208950996,0;0.809523820877075,0.190476194024086,0;0.825396835803986,0.174603179097176,0;0.841269850730896,0.158730164170265,0;0.857142865657806,0.142857149243355,0;0.873015880584717,0.126984134316444,0;0.888888895511627,0.111111111938953,0;0.904761910438538,0.0952380970120430,0;0.920634925365448,0.0793650820851326,0;0.936507940292358,0.0634920671582222,0;0.952380955219269,0.0476190485060215,0;0.968253970146179,0.0317460335791111,0;0.984126985073090,0.0158730167895556,0;1,0,0;];
% matColorMap = [0 1 0;0.0158730167895556,0.984126985073090,0;0.0317460335791111,0.968253970146179,0;0.0476190485060215,0.952380955219269,0;0.0634920671582222,0.936507940292358,0;0.0793650820851326,0.920634925365448,0;0.0952380970120430,0.904761910438538,0;0.111111111938953,0.888888895511627,0;0.126984134316444,0.873015880584717,0;0.142857149243355,0.857142865657806,0;0.158730164170265,0.841269850730896,0;0.174603179097176,0.825396835803986,0;0.190476194024086,0.809523820877075,0;0.206349208950996,0.793650805950165,0;0.222222223877907,0.777777791023254,0;0.238095238804817,0.761904776096344,0;0.253968268632889,0.746031761169434,0;0.269841283559799,0.730158746242523,0;0.285714298486710,0.714285731315613,0;0.301587313413620,0.698412716388702,0;0.317460328340530,0.682539701461792,0;0.333333343267441,0.666666686534882,0;0.349206358194351,0.650793671607971,0;0.365079373121262,0.634920656681061,0;0.380952388048172,0.619047641754150,0;0.396825402975082,0.603174626827240,0;0.412698417901993,0.587301611900330,0;0.428571432828903,0.571428596973419,0;0.444444447755814,0.555555582046509,0;0.460317462682724,0.539682567119598,0;0.476190477609634,0.523809552192688,0;0.492063492536545,0.507936537265778,0;0.507936537265778,0.492063492536545,0;0.523809552192688,0.476190477609634,0;0.539682567119598,0.460317462682724,0;0.555555582046509,0.444444447755814,0;0.571428596973419,0.428571432828903,0;0.587301611900330,0.412698417901993,0;0.603174626827240,0.396825402975082,0;0.619047641754150,0.380952388048172,0;0.634920656681061,0.365079373121262,0;0.650793671607971,0.349206358194351,0;0.666666686534882,0.333333343267441,0;0.682539701461792,0.317460328340530,0;0.698412716388702,0.301587313413620,0;0.714285731315613,0.285714298486710,0;0.730158746242523,0.269841283559799,0;0.746031761169434,0.253968268632889,0;0.761904776096344,0.238095238804817,0;0.777777791023254,0.222222223877907,0;0.793650805950165,0.206349208950996,0;0.809523820877075,0.190476194024086,0;0.825396835803986,0.174603179097176,0;0.841269850730896,0.158730164170265,0;0.857142865657806,0.142857149243355,0;0.873015880584717,0.126984134316444,0;0.888888895511627,0.111111111938953,0;0.904761910438538,0.0952380970120430,0;0.920634925365448,0.0793650820851326,0;0.936507940292358,0.0634920671582222,0;0.952380955219269,0.0476190485060215,0;0.968253970146179,0.0317460335791111,0;0.984126985073090,0.0158730167895556,0;1,0,0;];
% matColorMap = [0,0,0.968253970146179;0.0158730167895556,0,0.952380955219269;0.0317460335791111,0,0.936507940292358;0.0476190485060215,0,0.920634925365448;0.0634920671582222,0,0.904761910438538;0.0793650820851326,0,0.888888895511627;0.0952380970120430,0,0.873015880584717;0.111111111938953,0,0.857142865657806;0.126984134316444,0,0.841269850730896;0.142857149243355,0,0.825396835803986;0.158730164170265,0,0.809523820877075;0.174603179097176,0,0.793650805950165;0.190476194024086,0,0.777777791023254;0.206349208950996,0,0.761904776096344;0.222222223877907,0,0.746031761169434;0.238095238804817,0,0.730158746242523;0.253968268632889,0,0.714285731315613;0.269841283559799,0,0.698412716388702;0.285714298486710,0,0.682539701461792;0.301587313413620,0,0.666666686534882;0.317460328340530,0,0.650793671607971;0.333333343267441,0,0.634920656681061;0.349206358194351,0,0.619047641754150;0.365079373121262,0,0.603174626827240;0.380952388048172,0,0.587301611900330;0.396825402975082,0,0.571428596973419;0.412698417901993,0,0.555555582046509;0.428571432828903,0,0.539682567119598;0.444444447755814,0,0.523809552192688;0.460317462682724,0,0.507936537265778;0.476190477609634,0,0.492063492536545;0.492063492536545,0,0.476190477609634;0.507936537265778,0,0.460317462682724;0.523809552192688,0,0.444444447755814;0.539682567119598,0,0.428571432828903;0.555555582046509,0,0.412698417901993;0.571428596973419,0,0.396825402975082;0.587301611900330,0,0.380952388048172;0.603174626827240,0,0.365079373121262;0.619047641754150,0,0.349206358194351;0.634920656681061,0,0.333333343267441;0.650793671607971,0,0.317460328340530;0.666666686534882,0,0.301587313413620;0.682539701461792,0,0.285714298486710;0.698412716388702,0,0.269841283559799;0.714285731315613,0,0.253968268632889;0.730158746242523,0,0.238095238804817;0.746031761169434,0,0.222222223877907;0.761904776096344,0,0.206349208950996;0.777777791023254,0,0.190476194024086;0.793650805950165,0,0.174603179097176;0.809523820877075,0,0.158730164170265;0.825396835803986,0,0.142857149243355;0.841269850730896,0,0.126984134316444;0.857142865657806,0,0.111111111938953;0.873015880584717,0,0.0952380970120430;0.888888895511627,0,0.0793650820851326;0.904761910438538,0,0.0634920671582222;0.920634925365448,0,0.0476190485060215;0.936507940292358,0,0.0317460335791111;0.952380955219269,0,0.0158730167895556;0.968253970146179,0,0;0.984126985073090,0.0158730167895556,0;1,0,0;]

matColorMap = [0,0.996272087097168,0;0.000112005800474435,0.995990633964539,6.55643671052530e-05;0.000224011600948870,0.995709180831909,0.000131128734210506;0.000336017401423305,0.995427727699280,0.000196693101315759;0.000448023201897740,0.995146274566650,0.000262257468421012;0.000560029002372176,0.994864881038666,0.000327821820974350;0.000672034802846611,0.994583427906036,0.000393386202631518;0.000784040603321046,0.994301974773407,0.000458950555184856;0.000896046403795481,0.994020521640778,0.000524514936842024;0.00100805214606226,0.993739068508148,0.000590079289395362;0.00112005800474435,0.993457615375519,0.000655643641948700;0.00123206374701113,0.993176162242889,0.000721208052709699;0.00134406960569322,0.992894709110260,0.000786772405263037;0.00145607534796000,0.992613255977631,0.000852336757816374;0.00156808120664209,0.992331802845001,0.000917901110369712;0.00168008694890887,0.992050409317017,0.000983465462923050;0.00179209280759096,0.991768956184387,0.00104902987368405;0.00190409854985774,0.991487503051758,0.00111459428444505;0.00201610429212451,0.991206049919128,0.00118015857879072;0.00212811026722193,0.990924596786499,0.00124572298955172;0.00224011600948870,0.990643143653870,0.00131128728389740;0.00235212175175548,0.990361690521240,0.00137685169465840;0.00246412749402225,0.990080237388611,0.00144241610541940;0.00257613346911967,0.989798784255981,0.00150798039976507;0.00268813921138644,0.989517331123352,0.00157354481052607;0.00280014495365322,0.989235937595367,0.00163910922128707;0.00291215069591999,0.988954484462738,0.00170467351563275;0.00302415667101741,0.988673031330109,0.00177023792639375;0.00313616241328418,0.988391578197479,0.00183580222073942;0.00324816815555096,0.988110125064850,0.00190136663150042;0.0102930031716824,0.981065630912781,0.00190123077481985;0.0173378381878138,0.974021136760712,0.00190109503455460;0.0243826732039452,0.966976702213287,0.00190095917787403;0.0314275100827217,0.959932208061218,0.00190082343760878;0.0384723432362080,0.952887713909149,0.00190068758092821;0.0455171801149845,0.945843219757080,0.00190055172424763;0.0525620132684708,0.938798725605011,0.00190041598398238;0.0596068501472473,0.931754231452942,0.00190028012730181;0.0666516870260239,0.924709796905518,0.00190014427062124;0.0736965164542198,0.917665302753449,0.00190000853035599;0.0807413533329964,0.910620808601379,0.00189987267367542;0.0877861902117729,0.903576314449310,0.00189973693341017;0.0948310270905495,0.896531820297241,0.00189960107672960;0.101875856518745,0.889487326145172,0.00189946522004902;0.108920693397522,0.882442891597748,0.00189932947978377;0.115965530276299,0.875398397445679,0.00189919362310320;0.123010367155075,0.868353903293610,0.00189905788283795;0.130055204033852,0.861309409141541,0.00189892202615738;0.137100040912628,0.854264914989471,0.00189878616947681;0.144144862890244,0.847220420837402,0.00189865042921156;0.151189699769020,0.840175986289978,0.00189851457253098;0.158234536647797,0.833131492137909,0.00189837871585041;0.165279373526573,0.826086997985840,0.00189824297558516;0.172324210405350,0.819042503833771,0.00189810711890459;0.179369047284126,0.811998009681702,0.00189797137863934;0.186413884162903,0.804953515529633,0.00189783552195877;0.193458721041679,0.797909080982208,0.00189769966527820;0.200503557920456,0.790864586830139,0.00189756392501295;0.207548379898071,0.783820092678070,0.00189742806833237;0.214593216776848,0.776775598526001,0.00189729232806712;0.221638053655624,0.769731104373932,0.00189715647138655;0.228682890534401,0.762686610221863,0.00189702061470598;0.235727727413178,0.755642175674439,0.00189688487444073;0.242772564291954,0.748597681522369,0.00189674901776016;0.249817401170731,0.741553187370300,0.00189661327749491;0.256862223148346,0.734508693218231,0.00189647742081434;0.263907074928284,0.727464199066162,0.00189634156413376;0.270951896905899,0.720419704914093,0.00189620582386851;0.277996748685837,0.713375270366669,0.00189606996718794;0.285041570663452,0.706330776214600,0.00189593411050737;0.292086392641068,0.699286282062531,0.00189579837024212;0.299131244421005,0.692241787910461,0.00189566251356155;0.306176066398621,0.685197293758392,0.00189552677329630;0.313220918178558,0.678152799606323,0.00189539091661572;0.320265740156174,0.671108365058899,0.00189525505993515;0.327310591936111,0.664063870906830,0.00189511931966990;0.334355413913727,0.657019376754761,0.00189498346298933;0.341400265693665,0.649974882602692,0.00189484772272408;0.348445087671280,0.642930388450623,0.00189471186604351;0.355489909648895,0.635885894298554,0.00189457600936294;0.362534761428833,0.628841459751129,0.00189444026909769;0.369579583406448,0.621796965599060,0.00189430441241711;0.376624435186386,0.614752471446991,0.00189416855573654;0.383669257164001,0.607707977294922,0.00189403281547129;0.390714108943939,0.600663483142853,0.00189389695879072;0.397758930921555,0.593618988990784,0.00189376121852547;0.404803782701492,0.586574554443359,0.00189362536184490;0.411848604679108,0.579530060291290,0.00189348950516433;0.418893426656723,0.572485566139221,0.00189335376489908;0.425938278436661,0.565441071987152,0.00189321790821850;0.432983100414276,0.558396577835083,0.00189308216795325;0.440027952194214,0.551352083683014,0.00189294631127268;0.447072774171829,0.544307649135590,0.00189281045459211;0.454117625951767,0.537263154983521,0.00189267471432686;0.461162447929382,0.530218660831451,0.00189253885764629;0.468207269906998,0.523174166679382,0.00189240300096571;0.475252121686935,0.516129672527313,0.00189226726070046;0.482296943664551,0.509085178375244,0.00189213140401989;0.489341795444489,0.502040743827820,0.00189199566375464;0.496386617422104,0.494996249675751,0.00189185980707407;0.503431439399719,0.487951755523682,0.00189172395039350;0.510476291179657,0.480907261371613,0.00189158821012825;0.517521142959595,0.473862797021866,0.00189145235344768;0.524565935134888,0.466818302869797,0.00189131661318243;0.531610786914825,0.459773808717728,0.00189118075650185;0.538655638694763,0.452729344367981,0.00189104489982128;0.545700490474701,0.445684850215912,0.00189090915955603;0.552745282649994,0.438640356063843,0.00189077330287546;0.559790134429932,0.431595891714096,0.00189063744619489;0.566834986209869,0.424551397562027,0.00189050170592964;0.573879837989807,0.417506903409958,0.00189036584924907;0.580924630165100,0.410462439060211,0.00189023010898381;0.587969481945038,0.403417944908142,0.00189009425230324;0.595014333724976,0.396373450756073,0.00188995839562267;0.602059125900269,0.389328986406326,0.00188982265535742;0.609103977680206,0.382284492254257,0.00188968679867685;0.616148829460144,0.375239998102188,0.00188955105841160;0.623193681240082,0.368195533752441,0.00188941520173103;0.630238473415375,0.361151039600372,0.00188927934505045;0.637283325195313,0.354106545448303,0.00188914360478520;0.644328176975250,0.347062081098557,0.00188900774810463;0.651372969150543,0.340017586946487,0.00188887189142406;0.658417820930481,0.332973092794418,0.00188873615115881;0.665462672710419,0.325928628444672,0.00188860029447824;0.672507524490356,0.318884134292603,0.00188846455421299;0.679552316665649,0.311839640140533,0.00188832869753242;0.686597168445587,0.304795175790787,0.00188819284085184;0.693642020225525,0.297750681638718,0.00188805710058659;0.700686812400818,0.290706187486649,0.00188792124390602;0.707731664180756,0.283661723136902,0.00188778550364077;0.714776515960693,0.276617228984833,0.00188764964696020;0.721821367740631,0.269572734832764,0.00188751379027963;0.728866159915924,0.262528270483017,0.00188737805001438;0.735911011695862,0.255483776330948,0.00188724219333380;0.742955863475800,0.248439297080040,0.00188710633665323;0.750000715255737,0.241394817829132,0.00188697059638798;0.757045507431030,0.234350323677063,0.00188683473970741;0.764090359210968,0.227305844426155,0.00188669899944216;0.771135210990906,0.220261365175247,0.00188656314276159;0.778180003166199,0.213216871023178,0.00188642728608102;0.785224854946137,0.206172391772270,0.00188629154581577;0.792269706726074,0.199127912521362,0.00188615568913519;0.799314558506012,0.192083418369293,0.00188601994886994;0.806359350681305,0.185038939118385,0.00188588409218937;0.813404202461243,0.177994459867477,0.00188574823550880;0.820449054241180,0.170949965715408,0.00188561249524355;0.827493846416473,0.163905486464500,0.00188547663856298;0.834538698196411,0.156861007213593,0.00188534089829773;0.841583549976349,0.149816513061523,0.00188520504161716;0.848628401756287,0.142772033810616,0.00188506918493658;0.855673193931580,0.135727554559708,0.00188493344467133;0.862718045711517,0.128683060407639,0.00188479758799076;0.869762897491455,0.121638581156731,0.00188466173131019;0.876807689666748,0.114594101905823,0.00188452599104494;0.883852541446686,0.107549615204334,0.00188439013436437;0.890897393226624,0.100505128502846,0.00188425439409912;0.897942245006561,0.0934606492519379,0.00188411853741854;0.904987037181854,0.0864161625504494,0.00188398268073797;0.912031888961792,0.0793716758489609,0.00188384694047272;0.919076740741730,0.0723271965980530,0.00188371108379215;0.926121592521668,0.0652827098965645,0.00188357534352690;0.933166384696960,0.0582382269203663,0.00188343948684633;0.940211236476898,0.0511937402188778,0.00188330363016576;0.947256088256836,0.0441492572426796,0.00188316788990051;0.954300880432129,0.0371047742664814,0.00188303203321993;0.961345732212067,0.0300602894276381,0.00188289617653936;0.968390583992004,0.0230158045887947,0.00188276043627411;0.975435435771942,0.0159713216125965,0.00188262457959354;0.982480227947235,0.00892683677375317,0.00188248883932829;0.989525079727173,0.00188235298264772,0.00188235298264772;0.989749968051910,0.00181960791815072,0.00181960791815072;0.989974856376648,0.00175686273723841,0.00175686273723841;0.990199804306030,0.00169411767274141,0.00169411767274141;0.990424692630768,0.00163137260824442,0.00163137260824442;0.990649580955505,0.00156862754374743,0.00156862754374743;0.990874469280243,0.00150588236283511,0.00150588236283511;0.991099357604981,0.00144313729833812,0.00144313729833812;0.991324305534363,0.00138039223384112,0.00138039223384112;0.991549193859100,0.00131764705292881,0.00131764705292881;0.991774082183838,0.00125490198843181,0.00125490198843181;0.991998970508575,0.00119215692393482,0.00119215692393482;0.992223858833313,0.00112941174302250,0.00112941174302250;0.992448806762695,0.00106666667852551,0.00106666667852551;0.992673695087433,0.00100392161402851,0.00100392161402851;0.992898583412170,0.000941176491323859,0.000941176491323859;0.993123471736908,0.000878431368619204,0.000878431368619204;0.993348360061646,0.000815686304122210,0.000815686304122210;0.993573307991028,0.000752941181417555,0.000752941181417555;0.993798196315765,0.000690196116920561,0.000690196116920561;0.994023084640503,0.000627450994215906,0.000627450994215906;0.994247972965241,0.000564705871511251,0.000564705871511251;0.994472861289978,0.000501960807014257,0.000501960807014257;0.994697809219360,0.000439215684309602,0.000439215684309602;0.994922697544098,0.000376470590708777,0.000376470590708777;0.995147585868835,0.000313725497107953,0.000313725497107953;0.995372474193573,0.000250980403507128,0.000250980403507128;0.995597362518311,0.000188235295354389,0.000188235295354389;0.995822310447693,0.000125490201753564,0.000125490201753564;0.996047198772430,6.27451008767821e-05,6.27451008767821e-05;0.996272087097168,0,0;];

matColorMap = imresize(matColorMap,[255,3],'lanczos2');
matColorMap(matColorMap>1)=1;
matColorMap(matColorMap<0)=0;

% foo = get(gcf,'colormap')


% %%%
% % circular colormap blue - green - yellow - red - blue
% % matColorMap = [0.0784313753247261,0.168627455830574,0.549019634723663;0.0732026174664497,0.224052295088768,0.512418329715729;0.0679738596081734,0.279477119445801,0.475817024707794;0.0627451017498970,0.334901958703995,0.439215719699860;0.0575163401663303,0.390326797962189,0.402614384889603;0.0522875823080540,0.445751637220383,0.366013079881668;0.0470588244497776,0.501176476478577,0.329411774873734;0.0418300665915012,0.556601285934448,0.292810469865799;0.0366013087332249,0.612026154994965,0.256209164857864;0.0313725508749485,0.667450964450836,0.219607859849930;0.0261437911540270,0.722875833511353,0.183006539940834;0.0209150332957506,0.778300642967224,0.146405234932899;0.0156862754374743,0.833725512027741,0.109803929924965;0.0104575166478753,0.889150321483612,0.0732026174664497;0.00522875832393765,0.944575190544128,0.0366013087332249;0,1,0;0.0625000000000000,1,0;0.125000000000000,1,0;0.187500000000000,1,0;0.250000000000000,1,0;0.312500000000000,1,0;0.375000000000000,1,0;0.437500000000000,1,0;0.500000000000000,1,0;0.562500000000000,1,0;0.625000000000000,1,0;0.687500000000000,1,0;0.750000000000000,1,0;0.812500000000000,1,0;0.875000000000000,1,0;0.937500000000000,1,0;1,1,0;1,0.937500000000000,0;1,0.875000000000000,0;1,0.812500000000000,0;1,0.750000000000000,0;1,0.687500000000000,0;1,0.625000000000000,0;1,0.562500000000000,0;1,0.500000000000000,0;1,0.437500000000000,0;1,0.375000000000000,0;1,0.312500000000000,0;1,0.250000000000000,0;1,0.187500000000000,0;1,0.125000000000000,0;1,0.0625000000000000,0;1,0,0;0.942401945590973,0.0105392159894109,0.0343137271702290;0.884803950786591,0.0210784319788218,0.0686274543404579;0.827205896377564,0.0316176488995552,0.102941185235977;0.769607841968536,0.0421568639576435,0.137254908680916;0.712009787559509,0.0526960790157318,0.171568632125855;0.654411792755127,0.0632352977991104,0.205882370471954;0.596813738346100,0.0737745091319084,0.240196093916893;0.539215683937073,0.0843137279152870,0.274509817361832;0.481617659330368,0.0948529466986656,0.308823555707932;0.424019604921341,0.105392158031464,0.343137264251709;0.366421580314636,0.115931376814842,0.377451002597809;0.308823525905609,0.126470595598221,0.411764740943909;0.251225501298904,0.137009814381599,0.446078449487686;0.193627446889877,0.147549018263817,0.480392187833786;0.136029407382011,0.158088237047195,0.514705896377564;0.0784313753247261,0.168627455830574,0.549019634723663;];
% % circular colormap green - pink - green
% matColorMap = [0,1,0;0.0322580635547638,0.967741906642914,0.0322580635547638;0.0645161271095276,0.935483872890472,0.0645161271095276;0.0967741906642914,0.903225779533386,0.0967741906642914;0.129032254219055,0.870967745780945,0.129032254219055;0.161290317773819,0.838709652423859,0.161290317773819;0.193548381328583,0.806451618671417,0.193548381328583;0.225806444883347,0.774193525314331,0.225806444883347;0.258064508438110,0.741935491561890,0.258064508438110;0.290322571992874,0.709677398204804,0.290322571992874;0.322580635547638,0.677419364452362,0.322580635547638;0.354838699102402,0.645161271095276,0.354838699102402;0.387096762657166,0.612903237342835,0.387096762657166;0.419354826211929,0.580645143985748,0.419354826211929;0.451612889766693,0.548387110233307,0.451612889766693;0.483870953321457,0.516129016876221,0.483870953321457;0.516129016876221,0.483870953321457,0.516129016876221;0.548387110233307,0.451612889766693,0.548387110233307;0.580645143985748,0.419354826211929,0.580645143985748;0.612903237342835,0.387096762657166,0.612903237342835;0.645161271095276,0.354838699102402,0.645161271095276;0.677419364452362,0.322580635547638,0.677419364452362;0.709677398204804,0.290322571992874,0.709677398204804;0.741935491561890,0.258064508438110,0.741935491561890;0.774193525314331,0.225806444883347,0.774193525314331;0.806451618671417,0.193548381328583,0.806451618671417;0.838709652423859,0.161290317773819,0.838709652423859;0.870967745780945,0.129032254219055,0.870967745780945;0.903225779533386,0.0967741906642914,0.903225779533386;0.935483872890472,0.0645161271095276,0.935483872890472;0.967741906642914,0.0322580635547638,0.967741906642914;1,0,1;0.968750000000000,0.0312500000000000,0.968750000000000;0.937500000000000,0.0625000000000000,0.937500000000000;0.906250000000000,0.0937500000000000,0.906250000000000;0.875000000000000,0.125000000000000,0.875000000000000;0.843750000000000,0.156250000000000,0.843750000000000;0.812500000000000,0.187500000000000,0.812500000000000;0.781250000000000,0.218750000000000,0.781250000000000;0.750000000000000,0.250000000000000,0.750000000000000;0.718750000000000,0.281250000000000,0.718750000000000;0.687500000000000,0.312500000000000,0.687500000000000;0.656250000000000,0.343750000000000,0.656250000000000;0.625000000000000,0.375000000000000,0.625000000000000;0.593750000000000,0.406250000000000,0.593750000000000;0.562500000000000,0.437500000000000,0.562500000000000;0.531250000000000,0.468750000000000,0.531250000000000;0.500000000000000,0.500000000000000,0.500000000000000;0.468750000000000,0.531250000000000,0.468750000000000;0.437500000000000,0.562500000000000,0.437500000000000;0.406250000000000,0.593750000000000,0.406250000000000;0.375000000000000,0.625000000000000,0.375000000000000;0.343750000000000,0.656250000000000,0.343750000000000;0.312500000000000,0.687500000000000,0.312500000000000;0.281250000000000,0.718750000000000,0.281250000000000;0.250000000000000,0.750000000000000,0.250000000000000;0.218750000000000,0.781250000000000,0.218750000000000;0.187500000000000,0.812500000000000,0.187500000000000;0.156250000000000,0.843750000000000,0.156250000000000;0.125000000000000,0.875000000000000,0.125000000000000;0.0937500000000000,0.906250000000000,0.0937500000000000;0.0625000000000000,0.937500000000000,0.0625000000000000;0.0312500000000000,0.968750000000000,0.0312500000000000;0,1,0;];
% matColorMap = imresize(matColorMap,[255,3],'lanczos2');
% matColorMap(matColorMap>1)=1;
% matColorMap(matColorMap<0)=0;

% %%% red-green cmap
% % matColorMap = redgreencmap(255);
% %%% red-blue cmap
% matColorMap = redbluecmap(11);
% matColorMap = imresize(matColorMap,[255,3],'lanczos2');
% matColorMap(matColorMap>1)=1;
% matColorMap(matColorMap<0)=0;
% % create color value for each object

if size(matRescaledData,2)==1
    matColoredData = matColorMap(matRescaledData,:);
elseif size(matRescaledData,2)==2
    
    % if there is a second parameter, the first one determines the color.
    % the second when lower values makes the color go more to gray
    matColoredData = matColorMap(matRescaledData(:,1),:);
    
    % calculate how much it takes to transform each color to gray.
    matDifferenceFromGray = repmat([.5 .5 .5],size(matRescaledData,1),1) - matColoredData;

    % make that transformation to gray stepwise depending on second
    % parameter value.
    matStepFactor = 100 * nanzscore(double(matRescaledData(:,2)));
    matStepFactor(matStepFactor<1) = 1;
    
    matColoredData = matColoredData + (matDifferenceFromGray ./ repmat(matStepFactor,1,3));
    
    matColoredData(matColoredData<0) = 0;
    matColoredData(matColoredData>1) = 1;
    
end


fprintf('%s: looping over well segmentation images\n',mfilename,strObjectName)

matWellPosToDo = [];
if exist('matWells')
    if ~isempty(matWells)
        matWellPosToDo = matWells;
    else
        matWellPosToDo = unique(matCompleteMetaData(:,[1,2]),'rows')';
    end
else
    matWellPosToDo = unique(matCompleteMetaData(:,[1,2]),'rows')';
end    

% loop over all present well coordinates
for iWellPos = matWellPosToDo;%unique(matCompleteMetaData(:,[1,2]),'rows')'
    
    matCellIX = ismember(matCompleteMetaData(:,[1,2]),iWellPos','rows');
    
    matSegImgIX = ismember(matImageWellPositionData,iWellPos','rows');

    fprintf('%s: processing well row %d col %d\n',mfilename,iWellPos(1),iWellPos(2))
    
    % load jpg file corresponding to current well
    cellWellName = regexpi(cellWellSegmentationFileList{matSegImgIX},'Well_(.*)_Segmented','Tokens');
    strJpgFile = findfilewithregexpi(strJpgPath,sprintf('.*_%s_%s',cellWellName{1}{1},strRGBtype));
    
    
    matJPG = imread(fullfile(strJpgPath,strJpgFile));
    
    
    % load both cell and nucleus segmentation, and scale both down to JPG size
    % object: Cells
    matCellSegImg = imread(fullfile(strWellSegmentationPath, cellWellSegmentationFileList{matSegImgIX}));
    matCellSegImg = imresize(matCellSegImg,getcolumn(size(matJPG),[1,2]),'nearest');        
    % object: PreNuclei
    matPreNucleiSegImg = imread(fullfile(strWellSegmentationPath, strrep(cellWellSegmentationFileList{matSegImgIX},'Cells','PreNuclei')));
    matPreNucleiSegImg = imresize(matPreNucleiSegImg,getcolumn(size(matJPG),[1,2]),'nearest');        


    % Measure cell object sizes, to not draw outlines of too big cells
    objRegionprops = regionprops(matCellSegImg,'Area');
    matCellSizes = cat(1,objRegionprops.Area);
    matTooBigCellsIX = find(matCellSizes > 9000);
    % only discard those that were also discarded before (do not delete
    % those cell segmentations that are present in the meta data object
    % ids)
    matTooBigCellsIX(ismember(matTooBigCellsIX,matMetaDataWellObjectIDs(matCellIX))) = [];
    % set their segmentation to 0?
    matCellSegImg(ismember(matCellSegImg,matTooBigCellsIX)) = 0;
    
    
    %%% Create object colormap (do not change)
    % set all segmented objects to uint8(255)
    matObjectColorMap = ones(max([matMetaDataWellObjectIDs(matCellIX);unique(matCellSegImg(matCellSegImg>0))]),3);

    
    % set all segmented objects which were included to uint8(128)
    matCellIXObjectIDs = matMetaDataWellObjectIDs(matCellIX);
    matCellIXObjectIDs(matCellIXObjectIDs==0)=[];
    matObjectColorMap(matCellIXObjectIDs,:) = 0.5;
    
    % color code objects according to measurements, with backgroun uint8(0)
    matRGBCells = label2rgb(matCellSegImg, matObjectColorMap, [0,0,0]);
    
    % preemptively kick out nuclei with object ids larger than the biggest
    % cell id
    matPreNucleiSegImg(matPreNucleiSegImg>max(matCellSegImg(:))) = 0;
    matRGBNuclei = label2rgb(matPreNucleiSegImg, matObjectColorMap, [0,0,0]);
    
    
    
    
    %%% 
    % do edge-detection or drawing

%     % detect cell and nuclei edges
%     % edge-detection/drawing as in CellProfiler
%     StructuringElement = strel('disk',1);
% %     mat1 = im2bw(matPreNucleiSegImg,0);
%     mat1 = (matRGBNuclei(:,:,1)==128);
% %     mat2 = imdilate(mat1, StructuringElement);
%     mat2 = imerode(mat1, StructuringElement);
%     matPreNucleiEdges1 = logical(mat1 - mat2);

    matRGBNucleiGood = matPreNucleiSegImg;
    matRGBNucleiGood(~ismember(matRGBNucleiGood,[0;matCellIXObjectIDs])) = 0;
    matPreNucleiEdges1 = edge_bs(matRGBNucleiGood);

%     StructuringElement = strel('disk',1);
%     mat1 = (matRGBNuclei(:,:,1)==255);
%     mat1 = imdilate(mat1, StructuringElement);
%     mat2 = imerode(mat1, StructuringElement);
%     matPreNucleiEdges2 = logical(mat1 - mat2);
%     clear mat1 mat2;

    matRGBNucleiBad = matPreNucleiSegImg;
    matRGBNucleiBad(ismember(matRGBNucleiBad,matCellIXObjectIDs)) = 0;
    matPreNucleiEdges2 = edge_bs(matRGBNucleiBad);
    
    
%     % edge-detection/drawing as in CellProfiler
%     mat1 = imdilate(matRGBCells(:,:,1)==128, strel('disk',1));
%     mat2 = imerode(matRGBCells(:,:,1)==128, strel('disk',1));
%     matCellEdges1 = logical(mat1 - mat2);
%     clear mat1 mat2;    
    matRGBCellsGood = matCellSegImg;
    matRGBCellsGood(~ismember(matRGBCellsGood,[0;matCellIXObjectIDs])) = 0;
    matCellEdges1 = edge_bs(matRGBCellsGood);
    
%     % edge-detection/drawing as in CellProfiler
%     mat1 = imdilate(matRGBCells(:,:,1)==255, strel('disk',1));    
%     mat2 = imerode(matRGBCells(:,:,1)==255, strel('disk',1));
%     matCellEdges2 = logical(mat1 - mat2);
%     clear mat1 mat2;       
    matRGBCellsBad = matCellSegImg;
    matRGBCellsBad(ismember(matRGBCellsBad,matCellIXObjectIDs)) = 0;
    matCellEdges2 = edge_bs(matRGBCellsBad);
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % combine the channels and segmentations and outlines
    
    % start from the JPG
    matOutput = matJPG;
    % select only G & B channels from RGB JPG file, i.e. switch red channel
    % to uint8(0)
    matOutput(:,:,1) = uint8(0);

    % make background darker version of the JPG
%     matOutput(matRGBCells==0 | matRGBCells==255) = uint8(matOutput(matRGBCells==0 | matRGBCells==255) * 0.25);
    matOutput(matRGBCells==0) = uint8(0);
    % make kicked out cells grey
%     matOutput(matRGBCells==255 | matRGBNuclei==255) = uint8(matOutput(matRGBCells==255 | matRGBNuclei==255) * 0) + uint8(70);
    matOutput(matRGBCells==255) = uint8(70);
    matOutput(matRGBNuclei==255) = uint8(100);
    
    % add edges of nuclei
%     matOutput(repmat(matPreNucleiEdges,[1,1,3])) = uint8(255);
    matOutput(repmat(matPreNucleiEdges1,[1,1,3])) = uint8(255);
    matOutput(matPreNucleiEdges2) = uint8(255);

    % add edges of cells
    matOutput(repmat(matCellEdges1,[1,1,3])) = uint8(255);
    matOutput(matCellEdges2) = uint8(255);
    
    
%     figure;imshow(matOutput)
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% TEMP HACK, DRAW DIVIDING LINES BETWEEN FRAMES %%%
    % shirnk figure a bit
%     matRGBCells = imresize(matRGBCells,0.5);
    % draw grey (color = 0.5 0.5 0.5) lines at image borders
    [matSize1,matSize2,matSize3]=size(matOutput);
    matStepSize1 = matSize1 / (matStitchDimensions(1));% should come from get_image_snake!!
    matStepSize2 = matSize2 / (matStitchDimensions(2));% should come from get_image_snake!!
    matYSteps = 0:matStepSize1:matSize1;matYSteps(1)=1;
    matXSteps = 0:matStepSize2:matSize2;matXSteps(1)=1;
    matOutput(matYSteps,:,:) = uint8(255);
    matOutput(:,matXSteps,:) = uint8(255);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
%     figure(1)
%     clf(gcf)
%     hold on
%     imshow(matOutput)
% %     colormap(matColorMap);
% %     colorbar
%     hold off
    
    
    

    strFileName = fullfile(strOutputPath,strrep(cellWellSegmentationFileList{matSegImgIX},'.png',['_',strRGBtype,'.jpg']));

    imwrite(matOutput,strFileName,'quality',90);
    
%     % we could try jpeg2000...
%     strFileName = fullfile(strOutputPath,strrep(cellWellSegmentationFileList{matSegImgIX},'.png',['_',strFinalFieldName{matFeatureIx},'.jpx']));
%     imwrite(matOutput,strFileName);
    
    fprintf('%s: stored %s\n',mfilename,strFileName)

%     drawnow
%     pause(1)
end



drawnow
end
% merge_jpgs_per_plate(strrep(strWellSegmentationPath,'SEGMENTATION_WELL','JPG'), strFinalFieldName{matFeatureIx})
